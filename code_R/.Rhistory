# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# something like this could work.
train %>%
ggplot(aes(x = time, y = y, color = idx)) +
geom_point() +
geom_smooth(method = "lm")
View(train)
# something like this could work.
train %>%
ggplot(aes(x = t, y = y, color = idx)) +
geom_point() +
geom_smooth(method = "lm")
# something like this could work.
train %>%
ggplot(aes(x = t, y = y, color = idx)) +
geom_point() +
geom_smooth(method = "lm", alpha = 0.5)
?geom_smooth()
# something like this could work.
train %>%
ggplot(aes(x = t, y = y, color = idx)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
train %>%
ggplot(aes(x = t, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p1grob <- ggplotGrob(p1)
# plot training data
p1 <- train %>%
ggplot(aes(x = t, y = y, color = idx)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p1
# test out the grob
p1grob <- ggplotGrob(p1)
p1grob
grid.arrange(g1grob)
?ggsave()
ggsave("../plots_R/p1.png",
units = "in", # same as matplotlib
width = 10,
height = 7)
ggsave("../plots_R/p1.png",
units = "in", # same as matplotlib
width = 10,
height = 10)
ggsave("../plots_R/p1.png",
units = "in", # same as matplotlib
width = 10,
height = 7)
?ggsave()
10/7
t = 10/7
7*t
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load data
train <- read_csv("../data/train.csv")
test <- read_csv("../data/test.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# plot training data
p1 <- train %>%
ggplot(aes(x = t, y = y, color = idx)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#p2 <- train %>%
#  ggplot(aes(x = t, y = y)) +
#  geom_point() +
#  geom_smooth(method = "lm", se = FALSE)
ggsave("../plots_R/p1.png",
units = "in", # same as matplotlib
width = 10,
height = 7)
# fit a model
f0 <- bf(y ~ time) # complete pooling
f1 <- bf(y ~ time + (1+time|id)) # random intercept & slope.
# fit the first model
get_prior(formula = f0,
data = d,
family = gaussian,
)
# fit the first model
get_prior(formula = f0,
data = train,
family = gaussian,
)
# fit a model
f0 <- bf(y ~ t) # complete pooling
f1 <- bf(y ~ t + (1+t|id)) # random intercept & slope.
# fit the first model
get_prior(formula = f0,
data = train,
family = gaussian,
)
# set priors: here we only have sigma - not SD.
prior_f0 <- c(
prior(normal(0, 1), class = b),
prior(normal(0, 1), class = Intercept),
prior(normal(0, 1), class = sigma)
)
# fit the prior
m0_prior <- brm(
formula = f0, # model formula
family = gaussian, # likelihood function
data = train, # data
prior = prior_f0, # prior
sample_prior = "only", # only sample prior.
backend = "cmdstanr", # faster than rstan.
file = "../models_R/m0_prior", # save the model.
threads = threading(2), # within chain parallelization.
control = list(adapt_delta = .99,
max_treedepth = 20)
)
# pp
pp_check(m0_prior, nsamples = 50)
# pp
pp_check(m0_prior, nsamples = 200)
# pp
pp_check(m0_prior, nsamples = 100)
# set priors: here we only have sigma - not SD.
prior_f0 <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sigma)
)
# set priors: here we only have sigma - not SD.
prior_f0 <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sigma)
)
# fit the prior
m0_prior <- brm(
formula = f0, # model formula
family = gaussian, # likelihood function
data = train, # data
prior = prior_f0, # prior
sample_prior = "only", # only sample prior.
file_refit = "on_change", # refits file on change.
backend = "cmdstanr", # faster than rstan.
file = "../models_R/m0_prior", # save the model.
threads = threading(2), # within chain parallelization.
control = list(adapt_delta = .99,
max_treedepth = 20)
)
# pp
pp_check(m0_prior, nsamples = 100)
fit_mod <- function(formula,
family,
data,
prior,
sample_prior,
file){
b <- brm(
formula = formula,
family = family,
data = data,
prior = prior,
cores = 4, chains = 2,
sample_prior = sample_prior,
backend = "cmdstanr",
file = file,
file_refit = "on_change",
threads = threading(2),
control = list(adapt_delta = .99, # perhaps just .95
max_treedepth = 20)
)
return(b)
}
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# Chunk 2
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# Chunk 3
fit_mod <- function(formula,
family,
data,
prior,
sample_prior,
file){
b <- brm(
formula = formula,
family = family,
data = data,
prior = prior,
cores = 4, chains = 2,
sample_prior = sample_prior,
backend = "cmdstanr",
file = file,
file_refit = "on_change",
threads = threading(2),
control = list(adapt_delta = .99, # perhaps just .95
max_treedepth = 20)
)
return(b)
}
# Chunk 4
#formula
f_pooled <- bf(y ~ t) # complete pooling
# Chunk 5
# fit the first model
get_prior(formula = f_pooled,
data = train,
family = gaussian,
)
# set priors: three levels.
prior_pooled_strict <- c(
prior(normal(0, 0.05), class = b),
prior(normal(1.5, 0.05), class = Intercept),
prior(normal(0, 0.05), class = sigma)
)
prior_pooled_reasonable <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sigma)
)
prior_pooled_vague <- c(
prior(normal(0, 5), class = b),
prior(normal(1.5, 5), class = Intercept),
prior(normal(0, 5), class = sigma)
)
# Chunk 6
# fit the priors
m_pooled_strict_prior <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_strict,
sample_prior = "only",
file = "../models_R/m_pooled_strict_prior"
)
m_pooled_reasonable_prior <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_reasonable,
sample_prior = "only",
file = "../models_R/m_pooled_reasonable_prior"
)
m_pooled_vague_prior <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_vague,
sample_prior = "only",
file = "../models_R/m_pooled_vague_prior"
)
pp_check(m_pooled_strict_prior, nsamples = 100)
pp_check(m_poooled_reasonable_prior, nsamples = 100)
pp_check(m_pooled_reasonable_prior, nsamples = 100)
pp_check(m_pooled_vague_prior, nsamples = 100)
pp_check(m_pooled_reasonable_prior, nsamples = 100)
pp_check(m_pooled_strict_prior, nsamples = 100)
pp_check(m_pooled_reasonable_prior, nsamples = 100)
pp_check(m_pooled_vague_prior, nsamples = 100)
# fit the models
m_pooled_strict_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_strict,
sample_prior = TRUE,
file = "../models_R/m_pooled_strict_fit"
)
m_pooled_reasonable_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_reasonable,
sample_prior = TRUE,
file = "../models_R/m_pooled_reasonable_fit"
)
m_pooled_vague_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_vague,
sample_prior = TRUE,
file = "../models_R/m_pooled_vague_fit"
)
# fit the models
m_pooled_strict_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_strict,
sample_prior = TRUE,
file = "../models_R/m_pooled_strict_fit"
)
m_pooled_reasonable_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_reasonable,
sample_prior = TRUE,
file = "../models_R/m_pooled_reasonable_fit"
)
m_pooled_vague_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_vague,
sample_prior = TRUE,
file = "../models_R/m_pooled_vague_fit"
)
pp_check(m_pooled_strict_fit, nsamples = 100)
pp_check(m_pooled_reasonable_fit, nsamples = 100)
pp_check(m_pooled_vague_fit, nsamples = 100)
pp_check(m_pooled_reasonable_fit, nsamples = 100)
pp_check(m_pooled_vague_fit, nsamples = 100)
?pp_check
m_pooled_strict_prior <- readRDS("../models_R/m_pooled_strict_prior.rds")
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# prior fits
m_pooled_strict_prior <- readRDS("../models_R/m_pooled_strict_prior.rds")
m_pooled_reasonable_prior <- readRDS("../models_R/m_pooled_reasonable_prior.rds")
m_pooled_vague_prior <- readRDS("../models_R/m_pooled_vague_prior.rds")
# sampled models
m_pooled_strict_fit <- readRDS("../models_R/m_pooled_strict_fit.rds")
m_pooled_reasonable_fit <- readRDS("../models_R/m_pooled_reasonable_fit.rds")
m_pooled_vague_fit <- readRDS("../models_R/m_pooled_vague_fit.rds")
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior, nsamples = 100)
pooled_strict_prior_pred
pooled_strict_prior_pred + labs(title = "prior predictive check")
pooled_strict_prior_pred + labs(title = "R/brms: prior predictive check")
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior, nsamples = 100)
pooled_strict_prior_pred + labs(title = "R/brms: prior predictive check")
ggsave("../plots_R/pooled_strict_prior_pred.png",
units = "in", # same as matplotlib
width = 10,
height = 7)
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior, nsamples = 50)
pooled_strict_prior_pred + labs(title = "R/brms: prior predictive check")
ggsave("../plots_R/pooled_strict_prior_pred.png",
units = "in",
width = 10,
height = 7)
# reasonable model
pooled_reasonable_prior_pred <- pp_check(m_pooled_reasonable_prior, nsamples = 50)
pooled_reasonable_prior_pred + labs(title = "R/brms: prior predictive check")
ggsave("../plots_R/pooled_reasonable_prior_pred.png",
units = "in",
width = 10,
height = 7)
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior, nsamples = 50)
pooled_vague_prior_pred + labs(title = "R/brms: prior predictive check")
ggsave("../plots_R/pooled_vague_prior_pred.png",
units = "in",
width = 10,
height = 7)
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior, nsamples = 100)
pooled_strict_prior_pred + labs(title = "R/brms: prior predictive check")
ggsave("../plots_R/pooled_strict_prior_pred.png",
units = "in",
width = 10,
height = 7)
# reasonable model
pooled_reasonable_prior_pred <- pp_check(m_pooled_reasonable_prior, nsamples = 100)
pooled_reasonable_prior_pred + labs(title = "R/brms: prior predictive check")
ggsave("../plots_R/pooled_reasonable_prior_pred.png",
units = "in",
width = 10,
height = 7)
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior, nsamples = 100)
pooled_vague_prior_pred + labs(title = "R/brms: prior predictive check")
ggsave("../plots_R/pooled_vague_prior_pred.png",
units = "in",
width = 10,
height = 7)
pooled_strict_prior_pred + labs(title = "R/brms: prior predictive check") +
theme_minimal()
pooled_strict_prior_pred + labs(title = "R/brms: prior predictive check")
plot(pooled_vague_prior_pred, combo = "trace")
plot(pooled_vague_prior_pred, combo = c("dens", "trace"))
save_plot <- function(sting){
ggsave(string,
units = "in",
height = 10,
width = 7)
}
save_plot <- function(path){
ggsave(path,
units = "in",
height = 10,
width = 7)
}
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_strict_prior_pred.png")
# reasonable model
pooled_reasonable_prior_pred <- pp_check(m_pooled_reasonable_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_prior_pred.png")
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_prior_pred.png")
# strict model
pooled_strict_posterior_pred <- pp_check(m_pooled_strict_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_strict_posterior_pred.png")
# reasonable model
pooled_reasonable_posterior_pred <- pp_check(m_pooled_reasonable_prior,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_posterior_pred.png")
# vague model
pooled_vague_posterior_pred <- pp_check(m_pooled_vague_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_posterior_pred.png")
# strict model
pooled_strict_posterior_pred <- pp_check(m_pooled_strict_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_strict_posterior_pred.png")
# reasonable model
pooled_reasonable_posterior_pred <- pp_check(m_pooled_reasonable_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_posterior_pred.png")
# vague model
pooled_vague_posterior_pred <- pp_check(m_pooled_vague_fit,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_posterior_pred.png")
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_strict_prior_pred.png")
# reasonable model
pooled_reasonable_prior_pred <- pp_check(m_pooled_reasonable_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_prior_pred.png")
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_prior_pred.png")
save_plot <- function(path){
ggsave(path,
units = "in",
height = 7,
width = 10)
}
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_strict_prior_pred.png")
# reasonable model
pooled_reasonable_prior_pred <- pp_check(m_pooled_reasonable_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_prior_pred.png")
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_prior_pred.png")
# strict model
pooled_strict_posterior_pred <- pp_check(m_pooled_strict_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_strict_posterior_pred.png")
# reasonable model
pooled_reasonable_posterior_pred <- pp_check(m_pooled_reasonable_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_posterior_pred.png")
# vague model
pooled_vague_posterior_pred <- pp_check(m_pooled_vague_fit,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_posterior_pred.png")
