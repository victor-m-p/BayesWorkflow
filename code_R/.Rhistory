data_grid(t = seq_range(t, n = n_time)) %>%
add_predicted_draws(fit) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8),
color = "#08519C") +
geom_jitter(data = train, color = "navyblue",
shape = 1, alpha = 0.5, size = 2, width = 0.1) +
scale_fill_brewer() +
ggtitle(title)
}
plot_predicted_pooled(m_multilevel_posterior,
"Prediction Interval (.95, .8) for pooled model",
data = train,
n_time = 100)
plot_predicted_pooled(fit = m_pooled_posterior,
title = "Prediction Interval (.95, .8) for pooled model",
data = train,
n_time = 100)
# posterior fit intervals for pooled model.
plot_fitted_pooled <- function(fit, title, data = train, n_time = 100){
data %>%
data_grid(t = seq_range(t, n = n_time)) %>%
add_fitted_draws(m_pooled_posterior) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8),
color = "#08519C") +
geom_jitter(data = data,
color = "#2874a6",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle(title)
}
plot_fitted_pooled(fit = m_pooled_posterior,
title = "Posterior fit with intervals (.95, .8) for pooled",
data = train,
n_time = 100)
plot_fit_draws_pooled <- function(fit, title, data = train, n_time = 100){
data %>%
data_grid(t = seq_range(t, n = n_time)) %>%
add_fitted_draws(fit, n = 100) %>%
ggplot(aes(x = t, y = y)) +
geom_jitter(data = train,
color = "#2874a6",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
geom_line(aes(y = .value, group = .draw),
alpha = 1/20,
color = "#08519C") +
ggtitle(title)
}
plot_fit_draws_pooled(fit = m_pooled_posterior,
title = "Posterior fit (Kruschke style) for pooled model",
data = train,
n_time = 100)
# test the two functions
plot_predicted_groups(fit = m_multilevel_posterior,
title = "Prediction Interval (.95, .8) for Multilevel Model")
plot_predicted_groups <- function(fit, title, data = train, n_time = 100){
data %>%
data_grid(t = seq_range(t, n = n_time), idx) %>%
add_predicted_draws(fit) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8),
color = "#08519C") +
geom_jitter(data = data,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle(title)
}
plot_fitted_groups <- function(fit, title, data = train, n_time = 100){
data %>%
data_grid(t = seq_range(t, n = 50), idx) %>%
add_fitted_draws(fit,
re_formula = NA) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8),
color = "#08519C") +
geom_jitter(data = data,
color = "#2874a6",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle(title)
}
# test the two functions
plot_predicted_groups(fit = m_multilevel_posterior,
title = "Prediction Interval (.95, .8) for Multilevel Model")
plot_predicted_groups(fit = m_student_posterior,
title = "Prediction Intervals (.95, .8) for Student-t Model")
plot_fitted_groups(fit = m_multilevel_posterior,
title = "Fixed effects with Intervals (.95, .8) for Multilevel Model")
plot_fitted_groups(fit = m_student_posterior,
title = "Fixed effect draws (.95, .8) for Student-t Model")
# pooled
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T)
# pooled
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("test")
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms,
kableExtra,
magick,
webshot)
# load functions from fun_helper.R
source("fun_helper.R")
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# prior fits
m_pooled_prior <- readRDS("../models_R/m_pooled_reasonable_prior.rds")
m_multilevel_prior <- readRDS("../models_R/m_multilevel_reasonable_prior.rds")
m_student_prior <- readRDS("../models_R/m_student_reasonable_prior.rds")
# sampled models
m_pooled_posterior <- readRDS("../models_R/m_pooled_reasonable_fit.rds")
m_multilevel_posterior <- readRDS("../models_R/m_multilevel_reasonable_fit.rds")
m_student_posterior <- readRDS("../models_R/m_student_reasonable_fit.rds")
# add criterions
m_pooled_posterior <- add_criterion(m_pooled_posterior,
criterion = c("loo", "bayes_R2"))
m_multilevel_posterior <- add_criterion(m_multilevel_posterior,
criterion = c("loo", "bayes_R2"))
m_student_posterior <- add_criterion(m_student_posterior,
criterion = c("loo", "bayes_R2"),
moment_match = TRUE) # one problematic observation.
# run loo compare
loo_compare(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# also uses stacking (and gives the same as pyMC3)
loo_model_weights(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms,
kableExtra,
magick,
webshot)
# load functions from fun_helper.R
source("fun_helper.R")
# Chunk 2
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# Chunk 3
# prior fits
m_pooled_prior <- readRDS("../models_R/m_pooled_reasonable_prior.rds")
m_multilevel_prior <- readRDS("../models_R/m_multilevel_reasonable_prior.rds")
m_student_prior <- readRDS("../models_R/m_student_reasonable_prior.rds")
# sampled models
m_pooled_posterior <- readRDS("../models_R/m_pooled_reasonable_fit.rds")
m_multilevel_posterior <- readRDS("../models_R/m_multilevel_reasonable_fit.rds")
m_student_posterior <- readRDS("../models_R/m_student_reasonable_fit.rds")
# Chunk 4
# add criterions
m_pooled_posterior <- add_criterion(m_pooled_posterior,
criterion = c("loo", "bayes_R2"))
m_multilevel_posterior <- add_criterion(m_multilevel_posterior,
criterion = c("loo", "bayes_R2"))
m_student_posterior <- add_criterion(m_student_posterior,
criterion = c("loo", "bayes_R2"),
moment_match = TRUE) # one problematic observation.
# run loo compare
loo_compare(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# also uses stacking (and gives the same as pyMC3)
loo_model_weights(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# Chunk 5
# testing them.
prediction_interval_pool(fit = m_pooled_posterior,
title = "Prediction Interval (.95, .8) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_PI.png")
fixed_interval_pool(fit = m_pooled_posterior,
title = "Fixed effect draws (.95, .8) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_FI.png")
fixed_kruschke_pool(fit = m_pooled_posterior,
title = "Fixed effect draws (Kruschke style) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_FK.png")
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms,
kableExtra,
magick,
webshot,
modelr,
tidybayes)
# load functions from fun_helper.R
source("fun_helper.R")
# Chunk 2
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# Chunk 3
# prior fits
m_pooled_prior <- readRDS("../models_R/m_pooled_reasonable_prior.rds")
m_multilevel_prior <- readRDS("../models_R/m_multilevel_reasonable_prior.rds")
m_student_prior <- readRDS("../models_R/m_student_reasonable_prior.rds")
# sampled models
m_pooled_posterior <- readRDS("../models_R/m_pooled_reasonable_fit.rds")
m_multilevel_posterior <- readRDS("../models_R/m_multilevel_reasonable_fit.rds")
m_student_posterior <- readRDS("../models_R/m_student_reasonable_fit.rds")
# Chunk 4
# add criterions
m_pooled_posterior <- add_criterion(m_pooled_posterior,
criterion = c("loo", "bayes_R2"))
m_multilevel_posterior <- add_criterion(m_multilevel_posterior,
criterion = c("loo", "bayes_R2"))
m_student_posterior <- add_criterion(m_student_posterior,
criterion = c("loo", "bayes_R2"),
moment_match = TRUE) # one problematic observation.
# run loo compare
loo_compare(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# also uses stacking (and gives the same as pyMC3)
loo_model_weights(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# Chunk 5
# testing them.
prediction_interval_pool(fit = m_pooled_posterior,
title = "Prediction Interval (.95, .8) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_PI.png")
fixed_interval_pool(fit = m_pooled_posterior,
title = "Fixed effect draws (.95, .8) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_FI.png")
fixed_kruschke_pool(fit = m_pooled_posterior,
title = "Fixed effect draws (Kruschke style) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_FK.png")
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms,
kableExtra,
magick,
webshot,
modelr,
tidybayes)
# load functions from fun_helper.R
source("fun_helper.R")
# Chunk 2
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# Chunk 3
# prior fits
m_pooled_prior <- readRDS("../models_R/m_pooled_reasonable_prior.rds")
m_multilevel_prior <- readRDS("../models_R/m_multilevel_reasonable_prior.rds")
m_student_prior <- readRDS("../models_R/m_student_reasonable_prior.rds")
# sampled models
m_pooled_posterior <- readRDS("../models_R/m_pooled_reasonable_fit.rds")
m_multilevel_posterior <- readRDS("../models_R/m_multilevel_reasonable_fit.rds")
m_student_posterior <- readRDS("../models_R/m_student_reasonable_fit.rds")
# Chunk 4
# add criterions
m_pooled_posterior <- add_criterion(m_pooled_posterior,
criterion = c("loo", "bayes_R2"))
m_multilevel_posterior <- add_criterion(m_multilevel_posterior,
criterion = c("loo", "bayes_R2"))
m_student_posterior <- add_criterion(m_student_posterior,
criterion = c("loo", "bayes_R2"),
moment_match = TRUE) # one problematic observation.
# run loo compare
loo_compare(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# also uses stacking (and gives the same as pyMC3)
loo_model_weights(m_pooled_posterior,
m_multilevel_posterior,
m_student_posterior)
# Chunk 5
# testing them.
prediction_interval_pool(fit = m_pooled_posterior,
title = "Prediction interval (.95, .8) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_PI.png")
fixed_interval_pool(fit = m_pooled_posterior,
title = "Fixed effect interval (.95, .8) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_FI.png")
fixed_kruschke_pool(fit = m_pooled_posterior,
title = "Fixed effect draws (Kruschke style) for pooled model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/pooled_reasonable_FK.png")
# Chunk 6
# multilevel
prediction_interval_groups(fit = m_multilevel_posterior,
title = "Prediction interval (.95, .8) for multilevel model",
data = train,
n_time = 100)
save_plot(path = "../plots_R/multilevel_reasonable_PI.png")
fixed_interval_groups(fit = m_multilevel_posterior,
title = "Fixed effect interval (.95, .8) for multilevel model")
save_plot(path = "../plots_R/multilevel_reasonable_FI.png")
# student-t
prediction_interval_groups(fit = m_student_posterior,
title = "Prediction interval (.95, .8) for Student-t model")
save_plot(path = "../plots_R/student_reasonable_PI.png")
fixed_interval_groups(fit = m_student_posterior,
title = "Fixed effect interval (.95, .8) for Student-t model")
fixed_interval_groups(fit = m_student_posterior,
title = "Fixed effect interval (.95, .8) for Student-t model")
save_plot(path = "../plots_R/student_reasonable_FI.png")
# pooled
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T)
# pooled
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T)
save_plot(path = "../plots_R/pooled_reasonable_mcmc.png")
# multilevel
mcmc_plot(m_multilevel_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T)
save_plot(path = "../plots_R/multilevel_reasonable_mcmc.png")
# student
mcmc_plot(m_student_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T)
save_plot(path = "../plots_R/student_reasonable_mcmc.png")
?mcmc_plot
# pooled
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (pooled model)")
save_plot(path = "../plots_R/pooled_reasonable_mcmc.png",
width = 10,
height = 4)
# multilevel
mcmc_plot(m_multilevel_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (multilevel model)")
save_plot(path = "../plots_R/multilevel_reasonable_mcmc.png",
width = 10,
height = 4)
# student
mcmc_plot(m_student_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (Student-t model)")
save_plot(path = "../plots_R/student_reasonable_mcmc.png",
width = 10,
height = 4)
# pooled
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (pooled model)")
save_plot(path = "../plots_R/pooled_reasonable_mcmc.png",
width = 10,
height = 4)
# multilevel
mcmc_plot(m_multilevel_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (multilevel model)")
save_plot(path = "../plots_R/multilevel_reasonable_mcmc.png",
width = 10,
height = 4)
# student
mcmc_plot(m_student_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (Student-t model)")
save_plot(path = "../plots_R/student_reasonable_mcmc.png",
width = 10,
height = 4)
# pooled
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (pooled model)")
save_plot(path = "../plots_R/pooled_reasonable_mcmc.png",
width = 10,
height = 4)
# multilevel
mcmc_plot(m_multilevel_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (multilevel model)")
save_plot(path = "../plots_R/multilevel_reasonable_mcmc.png",
width = 10,
height = 4)
# student
mcmc_plot(m_student_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("Posterior intervals (Student-t model)")
save_plot(path = "../plots_R/student_reasonable_mcmc.png",
width = 10,
height = 4)
save_plot(path = "../plots_R/student_reasonable_mcmc.png",
height = 4,
width = 10)
?seq_range
# read test data
test <- read_csv("../data/test.csv")
# make sure that data format is okay
test <- test %>%
mutate(idx = as_factor(idx))
# only for multilevel (because it is best).
plot_predicted_groups <- function(fit, title, data = train, n_time = 100){
data %>%
data_grid(t = seq_range(t, n = n_time), idx) %>%
add_predicted_draws(fit) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8),
color = "#08519C") +
geom_jitter(data = data,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle(title)
}
plot_predicted_groups(m_multilevel_posterior,
"test",
data = test)
