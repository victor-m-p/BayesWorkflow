height = height)
# generic
mcmc_hdi(fit = m_intercept_generic_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/intercept_generic_HDI_param.png",
width = width,
height = height)
# weak
mcmc_hdi(fit = m_intercept_weak_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/intercept_weak_HDI_param.png",
width = width,
height = height)
# packages
pacman::p_load(tidyverse,
brms,
modelr,
tidybayes,
bayesplot)
RANDOM_SEED = 42
# load functions from fun_models.R
source("fun_models.R")
source("fun_helper.R")
# Only this is flexible at the moment. Not as nice as the python setup.
n_pp = 100
# load data
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
#formula
f_covariation <- bf(y ~ 0 + Intercept + t + (1+t|idx))
# fit the first model
get_prior(formula = f_covariation,
data = train,
family = gaussian)
# Chunk 1
# packages
pacman::p_load(tidyverse,
brms,
modelr,
tidybayes,
bayesplot)
RANDOM_SEED = 42
# load functions from fun_models.R
source("fun_models.R")
source("fun_helper.R")
# Chunk 2
# Only this is flexible at the moment. Not as nice as the python setup.
n_pp = 100
# Chunk 3
# load data
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
# Chunk 4
#formula
f_covariation <- bf(y ~ 0 + Intercept + t + (1+t|idx))
# Chunk 5
# fit the first model
get_prior(formula = f_covariation,
data = train,
family = gaussian)
# set priors: three levels.
prior_covariation_specific <- c(
prior(normal(0, 0.05), class = b, coef = t),
prior(normal(1.5, 0.05), class = b, coef = Intercept),
prior(normal(0, 0.05), class = sd),
prior(normal(0, 0.05), class = sigma),
prior(lkj(1), class = cor)
)
prior_covariation_generic <- c(
prior(normal(0, 0.5), class = b, coef = t),
prior(normal(1.5, 0.5), class = b, coef = covariation),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor)
)
prior_covariation_weak <- c(
prior(normal(0, 5), class = b, coef = t),
prior(normal(1.5, 5), class = b, coef = covariation),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor)
)
# Chunk 6
# compile the models
m_covariation_specific_prior <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_specific,
sample_prior = "only",
file = "../models_R/m_covariation_specific_prior",
random_seed = RANDOM_SEED
)
m_covariation_generic_prior <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_generic,
sample_prior = "only",
file = "../models_R/m_covariation_generic_prior",
random_seed = RANDOM_SEED
)
m_covariation_weak_prior <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_weak,
sample_prior = "only",
file = "../models_R/m_covariation_weak_prior",
random_seed = RANDOM_SEED
)
# Chunk 7
# specific model
covariation_specific_prior_pred <- pp_check(m_covariation_specific_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/covariation_specific_prior_pred.png")
# generic model
covariation_generic_prior_pred <- pp_check(m_covariation_generic_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/covariation_generic_prior_pred.png")
# weak model
covariation_weak_prior_pred <- pp_check(m_covariation_weak_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/covariation_weak_prior_pred.png")
# Chunk 8
# fit the models
m_covariation_specific_fit <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_specific,
sample_prior = TRUE,
file = "../models_R/m_covariation_specific_fit",
random_seed = RANDOM_SEED
)
m_covariation_generic_fit <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_generic,
sample_prior = TRUE,
file = "../models_R/m_covariation_generic_fit",
random_seed = RANDOM_SEED
)
m_covariation_weak_fit <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_weak,
sample_prior = TRUE,
file = "../models_R/m_covariation_weak_fit",
random_seed = RANDOM_SEED
)
# Chunk 9
# specific model
save_chains(
fit = m_covariation_specific_fit,
path = "../plots_R/covariation_specific_plot_trace.png"
)
# generic model
save_chains(
fit = m_covariation_generic_fit,
path = "../plots_R/covariation_generic_plot_trace.png"
)
# weak model
save_chains(
fit = m_covariation_weak_fit,
path = "../plots_R/covariation_weak_plot_trace.png"
)
# Chunk 10
# specific model
covariation_specific_posterior_pred <- pp_check(m_covariation_specific_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/covariation_specific_posterior_pred.png")
# generic model
covariation_generic_posterior_pred <- pp_check(m_covariation_generic_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/covariation_generic_posterior_pred.png")
# weak model
covariation_weak_posterior_pred <- pp_check(m_covariation_weak_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/covariation_weak_posterior_pred.png")
# Chunk 11
# specific
fixed_interval_groups(fit = m_covariation_specific_fit,
title = "R/brms: Prediction intervals (fixed)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_specific_HDI_fixed.png")
# generic
fixed_interval_groups(fit = m_covariation_generic_fit,
title = "R/brms: Prediction intervals (fixed)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_generic_HDI_fixed.png")
# weak
fixed_interval_groups(fit = m_covariation_weak_fit,
title = "R/brms: Prediction intervals (fixed)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_weak_HDI_fixed.png")
# Chunk 12
# specific
prediction_interval_groups(fit = m_covariation_specific_fit,
title = "R/brms: Prediction intervals (full)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_specific_HDI_full.png")
# generic
prediction_interval_groups(fit = m_covariation_generic_fit,
title = "R/brms: Prediction intervals (full)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_generic_HDI_full.png")
# weak
prediction_interval_groups(fit = m_covariation_weak_fit,
title = "R/brms: Prediction intervals (full)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_weak_HDI_full.png")
# Chunk 13
# for consistency with python.
# does not do anything at the moment..
width = 7
height = 4
# specific
mcmc_hdi(fit = m_covariation_specific_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/covariation_specific_HDI_param.png",
width = width,
height = height)
# generic
mcmc_hdi(fit = m_covariation_generic_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/covariation_generic_HDI_param.png",
width = width,
height = height)
# weak
mcmc_hdi(fit = m_covariation_weak_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/covariation_weak_HDI_param.png",
width = width,
height = height)
# Chunk 1
# packages
pacman::p_load(tidyverse,
brms,
modelr,
tidybayes,
bayesplot)
RANDOM_SEED = 42
# load functions from fun_models.R
source("fun_models.R")
source("fun_helper.R")
# Chunk 2
# Only this is flexible at the moment. Not as nice as the python setup.
n_pp = 100
# Chunk 3
# load data
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
# Chunk 4
#formula
f_covariation <- bf(y ~ 0 + Intercept + t + (1+t|idx))
# Chunk 5
# fit the first model
get_prior(formula = f_covariation,
data = train,
family = gaussian)
# set priors: three levels.
prior_covariation_specific <- c(
prior(normal(0, 0.05), class = b, coef = t),
prior(normal(1.5, 0.05), class = b, coef = Intercept),
prior(normal(0, 0.05), class = sd),
prior(normal(0, 0.05), class = sigma),
prior(lkj(1), class = cor)
)
prior_covariation_generic <- c(
prior(normal(0, 0.5), class = b, coef = t),
prior(normal(1.5, 0.5), class = b, coef = Intercept),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor)
)
prior_covariation_weak <- c(
prior(normal(0, 5), class = b, coef = t),
prior(normal(1.5, 5), class = b, coef = Intercept),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor)
)
# Chunk 1
# packages
pacman::p_load(tidyverse,
brms,
modelr,
tidybayes,
bayesplot)
RANDOM_SEED = 42
# load functions from fun_models.R
source("fun_models.R")
source("fun_helper.R")
# Chunk 2
# Only this is flexible at the moment. Not as nice as the python setup.
n_pp = 100
# Chunk 3
# load data
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
# Chunk 4
#formula
f_covariation <- bf(y ~ 0 + Intercept + t + (1+t|idx))
# Chunk 5
# fit the first model
get_prior(formula = f_covariation,
data = train,
family = gaussian)
# set priors: three levels.
prior_covariation_specific <- c(
prior(normal(0, 0.05), class = b, coef = t),
prior(normal(1.5, 0.05), class = b, coef = Intercept),
prior(normal(0, 0.05), class = sd),
prior(normal(0, 0.05), class = sigma),
prior(lkj(1), class = cor)
)
prior_covariation_generic <- c(
prior(normal(0, 0.5), class = b, coef = t),
prior(normal(1.5, 0.5), class = b, coef = Intercept),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor)
)
prior_covariation_weak <- c(
prior(normal(0, 5), class = b, coef = t),
prior(normal(1.5, 5), class = b, coef = Intercept),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor)
)
# Chunk 6
# compile the models
m_covariation_specific_prior <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_specific,
sample_prior = "only",
file = "../models_R/m_covariation_specific_prior",
random_seed = RANDOM_SEED
)
m_covariation_generic_prior <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_generic,
sample_prior = "only",
file = "../models_R/m_covariation_generic_prior",
random_seed = RANDOM_SEED
)
m_covariation_weak_prior <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_weak,
sample_prior = "only",
file = "../models_R/m_covariation_weak_prior",
random_seed = RANDOM_SEED
)
# Chunk 7
# specific model
covariation_specific_prior_pred <- pp_check(m_covariation_specific_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/covariation_specific_prior_pred.png")
# generic model
covariation_generic_prior_pred <- pp_check(m_covariation_generic_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/covariation_generic_prior_pred.png")
# weak model
covariation_weak_prior_pred <- pp_check(m_covariation_weak_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/covariation_weak_prior_pred.png")
# Chunk 8
# fit the models
m_covariation_specific_fit <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_specific,
sample_prior = TRUE,
file = "../models_R/m_covariation_specific_fit",
random_seed = RANDOM_SEED
)
m_covariation_generic_fit <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_generic,
sample_prior = TRUE,
file = "../models_R/m_covariation_generic_fit",
random_seed = RANDOM_SEED
)
m_covariation_weak_fit <- fit_mod(
formula = f_covariation,
family = gaussian,
data = train,
prior = prior_covariation_weak,
sample_prior = TRUE,
file = "../models_R/m_covariation_weak_fit",
random_seed = RANDOM_SEED
)
# Chunk 9
# specific model
save_chains(
fit = m_covariation_specific_fit,
path = "../plots_R/covariation_specific_plot_trace.png"
)
# generic model
save_chains(
fit = m_covariation_generic_fit,
path = "../plots_R/covariation_generic_plot_trace.png"
)
# weak model
save_chains(
fit = m_covariation_weak_fit,
path = "../plots_R/covariation_weak_plot_trace.png"
)
# Chunk 10
# specific model
covariation_specific_posterior_pred <- pp_check(m_covariation_specific_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/covariation_specific_posterior_pred.png")
# generic model
covariation_generic_posterior_pred <- pp_check(m_covariation_generic_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/covariation_generic_posterior_pred.png")
# weak model
covariation_weak_posterior_pred <- pp_check(m_covariation_weak_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/covariation_weak_posterior_pred.png")
# Chunk 11
# specific
fixed_interval_groups(fit = m_covariation_specific_fit,
title = "R/brms: Prediction intervals (fixed)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_specific_HDI_fixed.png")
# generic
fixed_interval_groups(fit = m_covariation_generic_fit,
title = "R/brms: Prediction intervals (fixed)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_generic_HDI_fixed.png")
# weak
fixed_interval_groups(fit = m_covariation_weak_fit,
title = "R/brms: Prediction intervals (fixed)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_weak_HDI_fixed.png")
# Chunk 12
# specific
prediction_interval_groups(fit = m_covariation_specific_fit,
title = "R/brms: Prediction intervals (full)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_specific_HDI_full.png")
# generic
prediction_interval_groups(fit = m_covariation_generic_fit,
title = "R/brms: Prediction intervals (full)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_generic_HDI_full.png")
# weak
prediction_interval_groups(fit = m_covariation_weak_fit,
title = "R/brms: Prediction intervals (full)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/covariation_weak_HDI_full.png")
# Chunk 13
# for consistency with python.
# does not do anything at the moment..
width = 7
height = 4
# specific
mcmc_hdi(fit = m_covariation_specific_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/covariation_specific_HDI_param.png",
width = width,
height = height)
# generic
mcmc_hdi(fit = m_covariation_generic_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/covariation_generic_HDI_param.png",
width = width,
height = height)
# weak
mcmc_hdi(fit = m_covariation_weak_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/covariation_weak_HDI_param.png",
width = width,
height = height)
