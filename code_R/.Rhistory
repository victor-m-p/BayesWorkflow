nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_prior_pred.png")
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_prior_pred.png")
save_plot <- function(path){
ggsave(path,
units = "in",
height = 7,
width = 10)
}
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_strict_prior_pred.png")
# reasonable model
pooled_reasonable_prior_pred <- pp_check(m_pooled_reasonable_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_prior_pred.png")
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_prior_pred.png")
# strict model
pooled_strict_posterior_pred <- pp_check(m_pooled_strict_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_strict_posterior_pred.png")
# reasonable model
pooled_reasonable_posterior_pred <- pp_check(m_pooled_reasonable_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_posterior_pred.png")
# vague model
pooled_vague_posterior_pred <- pp_check(m_pooled_vague_fit,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_posterior_pred.png")
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load functions from fun_models.R
source("fun_models.R")
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load functions from fun_models.R
source("fun_models.R")
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
#formula
f_pooled <- bf(y ~ t) # complete pooling
# fit the first model
get_prior(formula = f_pooled,
data = train,
family = gaussian,
)
# set priors: three levels.
prior_pooled_strict <- c(
prior(normal(0, 0.05), class = b),
prior(normal(1.5, 0.05), class = Intercept),
prior(normal(0, 0.05), class = sigma)
)
prior_pooled_reasonable <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sigma)
)
prior_pooled_vague <- c(
prior(normal(0, 5), class = b),
prior(normal(1.5, 5), class = Intercept),
prior(normal(0, 5), class = sigma)
)
# compile the models
m_pooled_strict_prior <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_strict,
sample_prior = "only",
file = "../models_R/m_pooled_strict_prior"
)
m_pooled_reasonable_prior <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_reasonable,
sample_prior = "only",
file = "../models_R/m_pooled_reasonable_prior"
)
m_pooled_vague_prior <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_vague,
sample_prior = "only",
file = "../models_R/m_pooled_vague_prior"
)
pp_check(m_pooled_strict_prior, nsamples = 100)
pp_check(m_pooled_reasonable_prior, nsamples = 100)
pp_check(m_pooled_vague_prior, nsamples = 100)
# fit the models
m_pooled_strict_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_strict,
sample_prior = TRUE,
file = "../models_R/m_pooled_strict_fit"
)
m_pooled_reasonable_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_reasonable,
sample_prior = TRUE,
file = "../models_R/m_pooled_reasonable_fit"
)
m_pooled_vague_fit <- fit_mod(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled_vague,
sample_prior = TRUE,
file = "../models_R/m_pooled_vague_fit"
)
pp_check(m_pooled_strict_fit, nsamples = 100)
pp_check(m_pooled_reasonable_fit, nsamples = 100)
pp_check(m_pooled_vague_fit, nsamples = 100)
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms,
kableExtra,
magick,
webshot)
# load functions from fun_helper.R
source("fun_helper.R")
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# prior fits
m_pooled_strict_prior <- readRDS("../models_R/m_pooled_strict_prior.rds")
m_pooled_reasonable_prior <- readRDS("../models_R/m_pooled_reasonable_prior.rds")
m_pooled_vague_prior <- readRDS("../models_R/m_pooled_vague_prior.rds")
# sampled models
m_pooled_strict_fit <- readRDS("../models_R/m_pooled_strict_fit.rds")
m_pooled_reasonable_fit <- readRDS("../models_R/m_pooled_reasonable_fit.rds")
m_pooled_vague_fit <- readRDS("../models_R/m_pooled_vague_fit.rds")
# prior fits
m_pooled_strict_prior <- readRDS("../models_R/m_pooled_strict_prior.rds")
m_pooled_reasonable_prior <- readRDS("../models_R/m_pooled_reasonable_prior.rds")
m_pooled_vague_prior <- readRDS("../models_R/m_pooled_vague_prior.rds")
# sampled models
m_pooled_strict_fit <- readRDS("../models_R/m_pooled_strict_fit.rds")
m_pooled_reasonable_fit <- readRDS("../models_R/m_pooled_reasonable_fit.rds")
m_pooled_vague_fit <- readRDS("../models_R/m_pooled_vague_fit.rds")
# strict model
pooled_strict_prior_pred <- pp_check(m_pooled_strict_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_strict_prior_pred.png")
# reasonable model
pooled_reasonable_prior_pred <- pp_check(m_pooled_reasonable_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_prior_pred.png")
# vague model
pooled_vague_prior_pred <- pp_check(m_pooled_vague_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_prior_pred.png")
# strict model
pooled_strict_posterior_pred <- pp_check(m_pooled_strict_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_strict_posterior_pred.png")
# reasonable model
pooled_reasonable_posterior_pred <- pp_check(m_pooled_reasonable_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/pooled_reasonable_posterior_pred.png")
# vague model
pooled_vague_posterior_pred <- pp_check(m_pooled_vague_fit,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/pooled_vague_posterior_pred.png")
View(train)
# fit the first model
get_prior(formula = f_multilevel,
data = train,
family = gaussian,
)
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load functions from fun_models.R
source("fun_models.R")
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
#formula
f_multilevel <- bf(y ~ t + (1+time|idx)) # complete pooling
# fit the first model
get_prior(formula = f_multilevel,
data = train,
family = gaussian,
)
# fit the first model
get_prior(formula = f_multilevel,
data = train,
family = gaussian,
)
#formula
f_multilevel <- bf(y ~ t + (1+t|idx)) # complete pooling
# fit the first model
get_prior(formula = f_multilevel,
data = train,
family = gaussian,
)
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load functions from fun_models.R
source("fun_models.R")
# Chunk 2
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# Chunk 3
#formula
f_multilevel <- bf(y ~ 1 + t + (1+t|idx)) # complete pooling
# Chunk 4
# fit the first model
get_prior(formula = f_multilevel,
data = train,
family = gaussian,
)
# set priors: three levels.
prior_multilevel_strict <- c(
prior(normal(0, 0.05), class = b),
prior(normal(1.5, 0.05), class = Intercept),
prior(normal(0, 0.05), class = sd),
prior(normal(0, 0.05), class = sigma),
prior(lkj(1), class = cor)
)
prior_multilevel_reasonable <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor)
)
prior_multilevel_vague <- c(
prior(normal(0, 5), class = b),
prior(normal(1.5, 5), class = Intercept),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor)
)
# Chunk 5
# compile the models
m_multilevel_strict_prior <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_strict,
sample_prior = "only",
file = "../models_R/m_multilevel_strict_prior"
)
m_multilevel_reasonable_prior <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_reasonable,
sample_prior = "only",
file = "../models_R/m_multilevel_reasonable_prior"
)
m_multilevel_vague_prior <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_vague,
sample_prior = "only",
file = "../models_R/m_multilevel_vague_prior"
)
# Chunk 6
pp_check(m_multilevel_strict_prior, nsamples = 100)
pp_check(m_multilevel_reasonable_prior, nsamples = 100)
pp_check(m_multilevel_vague_prior, nsamples = 100)
# Chunk 7
# fit the models
m_multilevel_strict_fit <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_strict,
sample_prior = TRUE,
file = "../models_R/m_multilevel_strict_fit"
)
m_multilevel_reasonable_fit <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_reasonable,
sample_prior = TRUE,
file = "../models_R/m_multilevel_reasonable_fit"
)
m_multilevel_vague_fit <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_vague,
sample_prior = TRUE,
file = "../models_R/m_multilevel_vague_fit"
)
# Chunk 8
pp_check(m_multilevel_strict_fit, nsamples = 100)
pp_check(m_multilevel_reasonable_fit, nsamples = 100)
pp_check(m_multilevel_vague_fit, nsamples = 100)
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load functions from fun_models.R
source("fun_models.R")
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load functions from fun_models.R
source("fun_models.R")
getwd()
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
#formula
f_student <- bf(y ~ 1 + t + (1+t|idx)) # complete pooling
# fit the first model
get_prior(formula = f_student,
data = train,
family = student,
)
# set priors: three levels.
prior_student_strict <- c(
prior(normal(0, 0.05), class = b),
prior(normal(1.5, 0.05), class = Intercept),
prior(normal(0, 0.05), class = sd),
prior(normal(0, 0.05), class = sigma),
prior(lkj(1), class = cor)
)
prior_student_reasonable <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor)
)
prior_student_vague <- c(
prior(normal(0, 5), class = b),
prior(normal(1.5, 5), class = Intercept),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor)
)
# fit the first model
get_prior(formula = f_student,
data = train,
family = student,
)
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms)
# load functions from fun_models.R
source("fun_models.R")
# Chunk 2
# load data
train <- read_csv("../data/train.csv")
# make sure that data format is okay
train <- train %>%
mutate(idx = as_factor(idx))
# Chunk 3
#formula
f_student <- bf(y ~ 1 + t + (1+t|idx)) # complete pooling
# Chunk 4
# fit the first model
get_prior(formula = f_student,
data = train,
family = student,
)
# set priors: three levels.
prior_student_strict <- c(
prior(normal(0, 0.05), class = b),
prior(normal(1.5, 0.05), class = Intercept),
prior(normal(0, 0.05), class = sd),
prior(normal(0, 0.05), class = sigma),
prior(lkj(1), class = cor),
prior(gamma(2, 0.1), class = nu) # same as in python.
)
prior_student_reasonable <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor),
prior(gamma(2, 0.1), class = nu)
)
prior_student_vague <- c(
prior(normal(0, 5), class = b),
prior(normal(1.5, 5), class = Intercept),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor),
prior(gamma(2, 0.1), class = nu)
)
# Chunk 5
# compile the models
m_student_strict_prior <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_strict,
sample_prior = "only",
file = "../models_R/m_student_strict_prior"
)
m_student_reasonable_prior <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_reasonable,
sample_prior = "only",
file = "../models_R/m_student_reasonable_prior"
)
m_student_vague_prior <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_vague,
sample_prior = "only",
file = "../models_R/m_student_vague_prior"
)
# Chunk 6
pp_check(m_student_strict_prior, nsamples = 100)
pp_check(m_student_reasonable_prior, nsamples = 100)
pp_check(m_student_vague_prior, nsamples = 100)
# Chunk 7
# fit the models
m_student_strict_fit <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_strict,
sample_prior = TRUE,
file = "../models_R/m_student_strict_fit"
)
m_student_reasonable_fit <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_reasonable,
sample_prior = TRUE,
file = "../models_R/m_student_reasonable_fit"
)
m_student_vague_fit <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_vague,
sample_prior = TRUE,
file = "../models_R/m_student_vague_fit"
)
# Chunk 8
pp_check(m_student_strict_fit, nsamples = 100)
pp_check(m_student_reasonable_fit, nsamples = 100)
pp_check(m_student_vague_fit, nsamples = 100)
