point_interval = mode_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### Plot HDI (full uncertainty) ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_predicted_draws(m_pooled) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8),
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### Plot HDI (fixed effects) ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_fitted_draws(m_pooled) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) + ##??
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
### Plot HDI (full uncertainty) ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_predicted_draws(m_pooled) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8),
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### HDI for parameters ###
mcmc_areas(
m_pooled,
pars = c("b_Intercept",
"b_t",
"sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean") +
ggtitle("R/brms: HDI intervals for parameters")
### Plot HDI (full uncertainty) ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_predicted_draws(m_pooled) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8),
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: packages & reproducibility ###
pacman::p_load(
tidyverse,
brms,
modelr,
tidybayes,
bayesplot)
RANDOM_SEED = 42
### R: preprocessing ###
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
### R: specify model & compile ###
# formula
f_pooled <- bf(y ~ 1 + t) # complete pooling
# set priors --> can use get_prior() if in doubt.
prior_pooled <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sigma))
# compile model & sample prior
m_pooled <- brm(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled,
sample_prior = "only",
backend = "cmdstanr")
### R: Prior predictive checks ###
pp_check(m_pooled,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
### R: sample posterior ###
m_pooled <- brm(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled,
sample_prior = TRUE, # only difference.
backend = "cmdstanr",
chains = 2,
cores = 4,
iter = 4000,
warmup = 2000,
threads = threading(2), # not sure this can be done in pyMC3
control = list(adapt_delta = .99,
max_treedepth = 20),
seed = RANDOM_SEED)
### R: plot trace ###
plot(m_pooled)
### R: get summary (not displayed) ###
summary(m_pooled)
### R: Posterior predictive checks ###
pp_check(m_pooled,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_fitted_draws(m_pooled) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_predicted_draws(m_pooled) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: HDI for parameters ###
mcmc_areas(
m_pooled,
pars = c("b_Intercept",
"b_t",
"sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean") + # or median?
ggtitle("R/brms: HDI intervals for parameters")
# Chunk 1
### R: packages & reproducibility ###
pacman::p_load(
tidyverse,
brms,
modelr,
tidybayes,
bayesplot)
RANDOM_SEED = 42
# Chunk 2
### R: preprocessing ###
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
# Chunk 3
### R: specify model & compile ###
# formula
f_multilevel <- bf(y ~ 1 + t + (1+t|idx)) # random eff. structure
# set priors --> can use get_prior() if in doubt.
prior_multilevel <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sd), # new
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor) # new
)
# compile model & sample prior
m_multilevel <- brm(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel,
sample_prior = "only",
backend = "cmdstanr")
# Chunk 4
### R: Prior predictive checks ###
pp_check(m_multilevel,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
# Chunk 5
### R: sample posterior ###
m_multilevel <- brm(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel,
sample_prior = TRUE, # only difference.
backend = "cmdstanr",
chains = 2,
cores = 4,
iter = 4000,
warmup = 2000,
threads = threading(2), # not sure this can be done in pyMC3
control = list(adapt_delta = .99,
max_treedepth = 20),
seed = RANDOM_SEED)
# Chunk 6
### R: plot trace ###
plot(m_multilevel)
# Chunk 7
### R: get summary (not displayed) ###
summary(m_multilevel)
# Chunk 8
### R: Posterior predictive checks ###
pp_check(m_multilevel,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
# Chunk 9
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_predicted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
# Chunk 10
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_fitted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
# Chunk 11
### R: HDI for parameters ###
mcmc_areas(
m_multilevel,
pars = c("b_Intercept",
"b_t",
"sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean") + # or median?
ggtitle("R/brms: HDI intervals for parameters")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100)) %>%
add_fitted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
### R: Prior predictive checks ###
pp_check(m_multilevel,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
### R: plot trace ###
plot(m_multilevel)
plot(m_multilevel,
N = 10) # N param per plot.
### R: get summary (not displayed) ###
summary(m_multilevel)
### R: Posterior predictive checks ###
pp_check(m_multilevel,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_predicted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_predicted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = mean_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 1000), idx) %>%
add_predicted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = mean_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_predicted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = mean_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_predicted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_predicted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .prediction),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = mode_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (full)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_fitted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_fitted_draws(m_multilevel) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = mean_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_fitted_draws(m_multilevel,
re_formula = NA) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = mean_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
### R: HDI prediction intervals ###
train %>%
data_grid(t = seq_range(t, n = 100), idx) %>%
add_fitted_draws(m_multilevel,
re_formula = NA) %>%
ggplot(aes(x = t, y = y)) +
stat_lineribbon(aes(y = .value),
.width = c(.95, .8), # HDI intervals
color = "#08519C",
point_interval = median_hdi) +
geom_jitter(data = train,
color = "navyblue",
shape = 1,
alpha = 0.5,
size = 2,
width = 0.1) +
scale_fill_brewer() +
ggtitle("R/brms: Prediction intervals (fixed)")
### R: HDI for parameters ###
mcmc_areas(
m_multilevel,
pars = c("b_Intercept",
"b_t",
"sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean") + # or median?
ggtitle("R/brms: HDI intervals for parameters")
