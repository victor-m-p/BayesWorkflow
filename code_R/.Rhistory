prior(gamma(2, 0.1), class = nu) # same as in python.
)
prior_student_generic <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor),
prior(gamma(2, 0.1), class = nu)
)
prior_student_weak <- c(
prior(normal(0, 5), class = b),
prior(normal(1.5, 5), class = Intercept),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor),
prior(gamma(2, 0.1), class = nu)
)
# Chunk 6
# compile the models
m_student_specific_prior <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_specific,
sample_prior = "only",
file = "../models_R/m_student_specific_prior"
)
m_student_generic_prior <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_generic,
sample_prior = "only",
file = "../models_R/m_student_generic_prior"
)
m_student_weak_prior <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_weak,
sample_prior = "only",
file = "../models_R/m_student_weak_prior"
)
# Chunk 7
# specific model
student_specific_prior_pred <- pp_check(m_student_specific_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/student_specific_prior_pred.png")
# generic model
student_generic_prior_pred <- pp_check(m_student_generic_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/student_generic_prior_pred.png")
# weak model
student_weak_prior_pred <- pp_check(m_student_weak_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/student_weak_prior_pred.png")
# Chunk 8
# fit the models
m_student_specific_fit <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_specific,
sample_prior = TRUE,
file = "../models_R/m_student_specific_fit"
)
m_student_generic_fit <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_generic,
sample_prior = TRUE,
file = "../models_R/m_student_generic_fit"
)
m_student_weak_fit <- fit_mod(
formula = f_student,
family = student,
data = train,
prior = prior_student_weak,
sample_prior = TRUE,
file = "../models_R/m_student_weak_fit"
)
# Chunk 9
# specific model
save_chains(
fit = m_student_specific_fit,
path = "../plots_R/student_specific_plot_trace.png"
)
# generic model
save_chains(
fit = m_student_generic_fit,
path = "../plots_R/student_generic_plot_trace.png"
)
# weak model
save_chains(
fit = m_student_weak_fit,
path = "../plots_R/student_weak_plot_trace.png"
)
# Chunk 10
# specific model
student_specific_posterior_pred <- pp_check(m_student_specific_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/student_specific_posterior_pred.png")
# generic model
student_generic_posterior_pred <- pp_check(m_student_generic_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/student_generic_posterior_pred.png")
# weak model
student_weak_posterior_pred <- pp_check(m_student_weak_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/student_weak_posterior_pred.png")
# Chunk 11
# specific
fixed_interval_groups(fit = m_student_specific_fit,
title = "Fixed effect interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/student_specific_HDI_fixed.png")
# generic
fixed_interval_groups(fit = m_student_generic_fit,
title = "Fixed effect interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/student_generic_HDI_fixed.png")
# weak
fixed_interval_groups(fit = m_student_weak_fit,
title = "Fixed effect interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/student_weak_HDI_fixed.png")
# Chunk 12
# specific
prediction_interval_groups(fit = m_student_specific_fit,
title = "Prediction interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/student_specific_HDI_full.png")
# generic
prediction_interval_groups(fit = m_student_generic_fit,
title = "Prediction interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/student_generic_HDI_full.png")
# weak
prediction_interval_groups(fit = m_student_weak_fit,
title = "Prediction interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/student_weak_HDI_full.png")
# Chunk 13
# for consistency with python.
# does not do anything at the moment..
width = 7
height = 4
# specific
mcmc_hdi(fit = m_student_specific_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/student_specific_HDI_param.png",
width = width,
height = height)
# generic
mcmc_hdi(fit = m_student_generic_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/student_generic_HDI_param.png",
width = width,
height = height)
# weak
mcmc_hdi(fit = m_student_weak_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/student_weak_HDI_param.png",
width = width,
height = height)
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms,
modelr,
tidybayes)
# load functions from fun_models.R
source("fun_models.R")
source("fun_helper.R")
# Chunk 2
# Only this is flexible at the moment. Not as nice as the python setup.
n_pp = 100
# Chunk 3
# load data
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
# Chunk 4
#formula
f_multilevel <- bf(y ~ 1 + t + (1+t|idx)) # random eff. structure
# Chunk 5
# fit the first model
get_prior(formula = f_multilevel,
data = train,
family = gaussian,
)
# set priors: three levels.
prior_multilevel_specific <- c(
prior(normal(0, 0.05), class = b),
prior(normal(1.5, 0.05), class = Intercept),
prior(normal(0, 0.05), class = sd),
prior(normal(0, 0.05), class = sigma),
prior(lkj(1), class = cor)
)
prior_multilevel_generic <- c(
prior(normal(0, 0.5), class = b),
prior(normal(1.5, 0.5), class = Intercept),
prior(normal(0, 0.5), class = sd),
prior(normal(0, 0.5), class = sigma),
prior(lkj(1), class = cor)
)
prior_multilevel_weak <- c(
prior(normal(0, 5), class = b),
prior(normal(1.5, 5), class = Intercept),
prior(normal(0, 5), class = sd),
prior(normal(0, 5), class = sigma),
prior(lkj(1), class = cor)
)
# Chunk 6
# compile the models
m_multilevel_specific_prior <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_specific,
sample_prior = "only",
file = "../models_R/m_multilevel_specific_prior"
)
m_multilevel_generic_prior <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_generic,
sample_prior = "only",
file = "../models_R/m_multilevel_generic_prior"
)
m_multilevel_weak_prior <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_weak,
sample_prior = "only",
file = "../models_R/m_multilevel_weak_prior"
)
# Chunk 7
# specific model
multilevel_specific_prior_pred <- pp_check(m_multilevel_specific_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/multilevel_specific_prior_pred.png")
# generic model
multilevel_generic_prior_pred <- pp_check(m_multilevel_generic_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/multilevel_generic_prior_pred.png")
# weak model
multilevel_weak_prior_pred <- pp_check(m_multilevel_weak_prior,
nsamples = 100) +
labs(title = "R/brms: prior predictive check")
save_plot(path = "../plots_R/multilevel_weak_prior_pred.png")
# Chunk 8
# fit the models
m_multilevel_specific_fit <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_specific,
sample_prior = TRUE,
file = "../models_R/m_multilevel_specific_fit"
)
m_multilevel_generic_fit <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_generic,
sample_prior = TRUE,
file = "../models_R/m_multilevel_generic_fit"
)
m_multilevel_weak_fit <- fit_mod(
formula = f_multilevel,
family = gaussian,
data = train,
prior = prior_multilevel_weak,
sample_prior = TRUE,
file = "../models_R/m_multilevel_weak_fit"
)
# Chunk 9
# specific model
save_chains(
fit = m_multilevel_specific_fit,
path = "../plots_R/multilevel_specific_plot_trace.png"
)
# generic model
save_chains(
fit = m_multilevel_generic_fit,
path = "../plots_R/multilevel_generic_plot_trace.png"
)
# weak model
save_chains(
fit = m_multilevel_weak_fit,
path = "../plots_R/multilevel_weak_plot_trace.png"
)
# Chunk 10
# specific model
multilevel_specific_posterior_pred <- pp_check(m_multilevel_specific_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/multilevel_specific_posterior_pred.png")
# generic model
multilevel_generic_posterior_pred <- pp_check(m_multilevel_generic_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/multilevel_generic_posterior_pred.png")
# weak model
multilevel_weak_posterior_pred <- pp_check(m_multilevel_weak_fit,
nsamples = 100) +
labs(title = "R/brms: posterior predictive check")
save_plot(path = "../plots_R/multilevel_weak_posterior_pred.png")
# Chunk 11
# specific
fixed_interval_groups(fit = m_multilevel_specific_fit,
title = "Fixed effect interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/multilevel_specific_HDI_fixed.png")
# generic
fixed_interval_groups(fit = m_multilevel_generic_fit,
title = "Fixed effect interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/multilevel_generic_HDI_fixed.png")
# weak
fixed_interval_groups(fit = m_multilevel_weak_fit,
title = "Fixed effect interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/multilevel_weak_HDI_fixed.png")
# Chunk 12
# specific
prediction_interval_groups(fit = m_multilevel_specific_fit,
title = "Prediction interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/multilevel_specific_HDI_full.png")
# generic
prediction_interval_groups(fit = m_multilevel_generic_fit,
title = "Prediction interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/multilevel_generic_HDI_full.png")
# weak
prediction_interval_groups(fit = m_multilevel_weak_fit,
title = "Prediction interval (.95, .8)",
data = train,
n_time = 100)
save_plot(path = "../plots_R/multilevel_weak_HDI_full.png")
# Chunk 13
# for consistency with python.
# does not do anything at the moment..
width = 7
height = 4
# specific
mcmc_hdi(fit = m_multilevel_specific_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/multilevel_specific_HDI_param.png",
width = width,
height = height)
# generic
mcmc_hdi(fit = m_multilevel_generic_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/multilevel_generic_HDI_param.png",
width = width,
height = height)
# weak
mcmc_hdi(fit = m_multilevel_weak_fit,
title = "R/brms: HDI intervals for parameters")
save_plot(path = "../plots_R/multilevel_weak_HDI_param.png",
width = width,
height = height)
# fit the first model
get_prior(formula = f_multilevel,
data = train,
family = gaussian,
)
# Chunk 1
# working directory
setwd("~/BayesWorkflow/code_r")
# packages
pacman::p_load(tidyverse,
brms,
modelr,
tidybayes)
# load functions from fun_models.R
source("fun_models.R")
source("fun_helper.R")
# Chunk 2
# sampled models
m_pooled_posterior <- readRDS("../models_R/m_multilevel_generic_fit.rds")
# Chunk 3
# read test data
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
plot(m_pooled_posterior,
N = 10)
mcmc_plot(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("title")
?mcmc_plot
mcmc_intervals(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("title")
library(bayesplot)
mcmc_intervals(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
fixed = T) +
ggtitle("title")
library(bayesplot)
mcmc_intervals(m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma")) +
ggtitle("title")
mcmc_areas(
m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
mcmc_areas(
m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
ggtitle("test")
mcmc_areas(
m_pooled_posterior,
pars = c("b_Intercept",
"b_t",
"sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
ggtitle("R/brms: Ridgeplot 80% HDI")
knit_with_parameters('~/BayesWorkflow/code_R/run_predictions.Rmd')
library(knitr)
purl("run_pooled.Rmd", output = "run_pooled.R", documentation = 2)
?stat_lineribbon
??stat_lineribbon
??stat_lineribbon
### packages & reproducibility ###
pacman::p_load(tidyverse,
brms,
modelr,
tidybayes,
bayesplot)
RANDOM_SEED = 42
### preprocessing ###
train <- read_csv("../data/train.csv") %>%
mutate(idx = as_factor(idx))
### specify model & compile ###
# formula
f_pooled <- bf(y ~ 1 + t) # complete pooling
# set priors (could use get_prior() if in doubt).
sigma = 0.5
prior_pooled <- c(
prior(normal(0, sigma), class = b),
prior(normal(1.5, sigma), class = Intercept),
prior(normal(0, sigma), class = sigma)
)
# compile model & sample prior
m_pooled <- brm(
formula = f_pooled,
family = gaussian,
data = train,
prior = prior_pooled,
sample_prior = "only",
backend = "cmdstanr",
chains = 2,
cores = 4,
iter = 4000,
warmup = 2000,
threads = threading(2), # not sure this can be done in pyMC3
control = list(adapt_delta = .99,
max_treedepth = 20),
seed = RANDOM_SEED
)
